global !p
def to_camelcase(value):
	return "".join(word[0].upper() + word[1:] for word in value.split('_'))
endglobal

snippet cl "class .. (class)"
class ${1:`!p snip.rv = to_camelcase(snip.basename) or "Name"`}
{
public:
	${1/(\w+).*/$1/} ($3);
	virtual ~${1/(\w+).*/$1/} () ${4:{}}
	$0

private:
	${2:/* data */}
};
endsnippet

snippet mfunc "member func"
${1:void} ${2:`!p snip.rv = to_camelcase(snip.basename)`}::${3:Func}($4)
{
	$0
}
endsnippet

snippet func "bare function"
${1:void} ${2:Function}($3)
{
	$0
}
endsnippet

snippet inc "include"
#include <$1>
endsnippet

snippet inc" "local include"
#include "$1"
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:Namespace} {

${0:${VISUAL}}

}${1/.+/ \/\/ namespace /m}$1${1/.+/ /m}
endsnippet

snippet av "std::vector (v)"
auto ${1:vec} = std::vector<${2:int}> {$3};
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet
